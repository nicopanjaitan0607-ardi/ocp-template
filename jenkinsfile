def buildNumber = env.BUILD_NUMBER as int
if (buildNumber > 1) milestone(buildNumber - 1)
milestone(buildNumber)

def micrositeName = 'home'
def git_repo = "https://code.mylabzolution.com/digital-banking/frontend-ibvictoria-dashboard.git"
def public_route_prefix = 'victoria'
//test
def git_branch = 'development'

def nexus_base_url = 'https://library.mylabzolution.com'
def nexus_deploy_repo = "$nexus_base_url/repository/ist_npm/"

def cpu_req = '30m'
def memory_req = '200Mi'
def cpu_limit = '50m'
def memory_limit = '300Mi'
def max_replica_count = 1
def env_var = 'env1'
def cust_var = 'var1'
def env2_var = 'env2'
def cust2_var = 'var2'

def health_probe_port = '8080'
def health_probe_path = '/'

// def tag = 'v0.0.2'
// def release = 'v0.0.1'

def host_okd = 'https://master.okd.local:8443'
def projectName = 'int-b-vic' 
def ocp_project = 'int-b-vic'
def env = 'vc-sit-fe'
//def secret_file = 'web-esalaam-secret'
def pull_secret = 'default-dockercfg-zbc9z'
def channel_id = 'VC'
//def nodeName
def appName
def appFullVersion
def gitCommitId


node ('node') {
   stage ('Checkout'){
      git url: "${git_repo}", branch: "${git_branch}", credentialsId: 'alex'
   }
   stage ('Prepare'){
      withCredentials([[$class: 'UsernamePasswordMultiBinding',
         credentialsId: 'nexus',
         usernameVariable: 'nexus_username', passwordVariable: 'nexus_password']]) {
               sh """
                  echo 'Downloading ci-cd templates...'
                  rm -rf ./cicd-template
                  curl --fail -u ${nexus_username}:${nexus_password} -o cicd-template-${env}.tar.gz ${nexus_base_url}/repository/general-ist/cicd-template-${env}.tar.gz
                  mkdir cicd-template && tar -xzvf ./cicd-template-${env}.tar.gz -C "\$(pwd)/cicd-template"
                  """
               prepareEnv(channel_id)
               prepareNginx(public_route_prefix)
      }

      appName = sh( script: 'node -e "console.log(require(\'./package.json\').name);"', returnStdout: true).trim()
      appFullVersion = sh( script: 'node -e "console.log(require(\'./package.json\').version);"', returnStdout: true).trim()
      appFullVersion = appFullVersion.substring(0, appFullVersion.lastIndexOf('.')) + ".${BUILD_NUMBER}"
      gitCommitId = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()

      // sh 'sed -i \'s/ENVIRONMENT = "local"/ENVIRONMENT = "dev"/g\' ./src/config.js'
   }

    stage ('Install Dependencies'){
    //  sh """
    // yarn cache clean --force
    //  rm package-lock.json || true
    //    rm yarn.lock || true
    //    rm -r node_modules || true
    //    CHROMEDRIVER_SKIP_DOWNLOAD=true
    //    rm -f .npmrc
    //    npm install
    //  """
    }
    stage('Build Package'){
       sh 'PUBLIC_URL="/' + micrositeName + '" yarn run build:dev'
    }

    // stage('Unit Test'){
    //    sh 'npm run test-ci'
    // }

    // stage("Archive") {
    //    withCredentials([[$class: 'UsernamePasswordMultiBinding',
    //        credentialsId: 'nexus',
    //        usernameVariable: 'nexus_username', passwordVariable: 'nexus_password']]) {
    //            sh "curl -u ${nexus_username}:${nexus_password} --upload-file ./${appName}-${appFullVersion}.zip ${nexus_deploy_repo}/${appName}/${appName}-${appFullVersion}.zip"
    //    }
    // }
   stage('OpenShift Build'){
       withCredentials([[$class: 'UsernamePasswordMultiBinding',
            credentialsId: 'okd-btn',
            usernameVariable: 'oc_username', passwordVariable: 'oc_password']]) {
                  sh 'oc login -u=${oc_username} -p=${oc_password} --server=https://master.okd.local:8443 --insecure-skip-tls-verify=true'
               }
          appMajorVersion = appFullVersion.substring(0, appFullVersion.indexOf('.'))

        try {
            sh """
                    oc get bc -n ${ocp_project} | grep ${appName}-v${appMajorVersion}
                    oc get is -n ${ocp_project} | grep ${appName}-v${appMajorVersion}
                """
                checkBC = sh(returnStdout: true, script: """oc get bc -n ${ocp_project} | grep ${appName}-v${appMajorVersion}""").trim()
                checkBC = checkBC.split(' ')[0]
                checkIS = sh(returnStdout: true, script: """oc get is -n ${ocp_project} | grep ${appName}-v${appMajorVersion}""").trim()
                checkIS = checkIS.split(' ')[0]
        }
        catch (e) {
            echo 'Err: Incremental Build failed with Error: ' + e.toString()
            echo '     Error adalah salah satu warna kehidupan'
            checkBC = ""
            checkIS = ""
            //throw e
        }

        if (checkBC == ""  && checkIS == "" ){
            sh """
            set -x
            set -e

            oc project ${ocp_project}
            oc process -f ./cicd-template/openshift/build-config-template.yaml -n ${ocp_project} \
            -p S2I_BUILD_IMAGE='nginx-114-rhel7' -p S2I_BUILD_IMAGE_PULL_SECRET='${pull_secret}' \
            -p APP_NAME='${appName}' -p APP_FULL_VERSION='${appFullVersion}' -p APP_MAJOR_VERSION='${appMajorVersion}' \
            -p GIT_COMMIT_ID=${gitCommitId} -p JENKINS_BUILD_NUMBER=${BUILD_NUMBER} \
            | oc create -n ${ocp_project} -f -

            oc start-build ${appName}-v${appMajorVersion} -n ${ocp_project} --from-dir ./build --follow
        """
        }
        if (checkBC == checkBC && checkIS == checkIS){
            sh """
            set -x
            set -e

            oc project ${ocp_project}
            oc process -f ./cicd-template/openshift/build-config-template.yaml -n ${ocp_project} \
            -p S2I_BUILD_IMAGE='nginx-114-rhel7' -p S2I_BUILD_IMAGE_PULL_SECRET='${pull_secret}' \
            -p APP_NAME='${appName}' -p APP_FULL_VERSION='${appFullVersion}' -p APP_MAJOR_VERSION='${appMajorVersion}' \
            -p GIT_COMMIT_ID=${gitCommitId} -p JENKINS_BUILD_NUMBER=${BUILD_NUMBER} \
            | oc replace --force=true -n ${ocp_project} -f -

            oc start-build ${appName}-v${appMajorVersion} -n ${ocp_project} --from-dir ./build --follow
        """
        }

    }
    stage ('OpenShift Application ConfigMap'){
        sh """
                set -x
                set -e
                if [ -f './src/main/resources/application.properties' ]; then
                    export APP_CONFIG_DATA=\$(cat ./src/main/resources/application.properties)
                else
                    export APP_CONFIG_DATA='key=value'
                fi

                oc project ${ocp_project}
                oc process -f ./cicd-template/openshift/configmap-template.yaml -n ${ocp_project} \
                  -p APP_NAME='${appName}' -p APP_FULL_VERSION='${appFullVersion}' -p APP_MAJOR_VERSION='${appMajorVersion}' \
                  -p GIT_COMMIT_ID=${gitCommitId} -p JENKINS_BUILD_NUMBER=${BUILD_NUMBER} -p CONFIG_DATA="\$APP_CONFIG_DATA" \
                  | oc apply -n ${ocp_project} -f -
           """
    }
    stage ('OpenShift Deployment'){
        try {
            sh """
                    oc get svc -n ${ocp_project} | grep ${appName}-v${appMajorVersion}
                    oc get dc -n ${ocp_project} | grep ${appName}-v${appMajorVersion}
                """
                checkSVC = sh(returnStdout: true, script: """oc get svc -n ${ocp_project} | grep ${appName}-v${appMajorVersion}""").trim()
                checkSVC = checkSVC.split(' ')[0]
                checkDC = sh(returnStdout: true, script: """oc get dc -n ${ocp_project} | grep ${appName}-v${appMajorVersion}""").trim()
                checkDC = checkDC.split(' ')[0]
        }
        catch (e) {
            echo 'Err: Incremental Build failed with Error: ' + e.toString()
            echo '     Error adalah salah satu warna kehidupan'
            checkSVC = ""
            checkDC = ""
            //throw e
        }

        if (checkSVC == "" && checkDC == ""){
            sh """
            set -x
            set -e

            oc project ${ocp_project}
            oc process -f ./cicd-template/openshift/deployment-config-template.yaml -n ${ocp_project} \
            -p APP_NAME=${appName} -p APP_FULL_VERSION=${appFullVersion} -p APP_MAJOR_VERSION=${appMajorVersion}  \
            -p GIT_COMMIT_ID=${gitCommitId} -p JENKINS_BUILD_NUMBER=${BUILD_NUMBER} -p ENV_VAR="env_var" \
            -p CUST_VAR=" " -p ENV2_VAR="env2_var" -p CUST2_VAR=" " -p CPU_REQ=${cpu_req} -p MEM_REQ=${memory_req} -p CPU_LIMIT=${cpu_limit} \
            -p MEM_LIMIT=${memory_limit} \
            | oc create -n ${ocp_project} -f -
            sleep 5
            """

            if (public_route_prefix != null && public_route_prefix != ''){
                sh """
                    set -x
                    set -e

                    oc project ${ocp_project}
                    oc process -f ./cicd-template/openshift/route-template.yaml -n ${ocp_project} \
                    -p APP_NAME=${appName} -p APP_FULL_VERSION=${appFullVersion} -p APP_MAJOR_VERSION=${appMajorVersion}  \
                    -p GIT_COMMIT_ID=${gitCommitId} -p PUBLIC_ROUTE_PREFIX=${public_route_prefix} -p JENKINS_BUILD_NUMBER=${BUILD_NUMBER} \
                    -p APP_ROUTE_PATH="/${micrositeName}" \
                    | oc create -n ${ocp_project} -f -
                    oc annotate route ${appName}-v${appMajorVersion} --overwrite haproxy.router.openshift.io/timeout=5m
                    sleep 5

                    oc rollout status dc/${appName}-v${appMajorVersion}
                    """
            }
        }
        if (checkSVC == checkSVC && checkDC == checkDC){
            sh """
            set -x
            set -e

            oc project ${ocp_project}
            oc process -f ./cicd-template/openshift/deployment-config-template.yaml -n ${ocp_project} \
            -p APP_NAME=${appName} -p APP_FULL_VERSION=${appFullVersion} -p APP_MAJOR_VERSION=${appMajorVersion}  \
            -p GIT_COMMIT_ID=${gitCommitId} -p JENKINS_BUILD_NUMBER=${BUILD_NUMBER} -p ENV_VAR="env_var" \
            -p CUST_VAR=" " -p ENV2_VAR="env2_var" -p CUST2_VAR=" " -p CPU_REQ=${cpu_req} -p MEM_REQ=${memory_req} -p CPU_LIMIT=${cpu_limit} \
            -p MEM_LIMIT=${memory_limit} \
            | oc replace --force=true -n ${ocp_project} -f -
            sleep 5
            """

            if (public_route_prefix != null && public_route_prefix != ''){
                sh """
                    set -x
                    set -e

                    oc project ${ocp_project}
                    oc process -f ./cicd-template/openshift/route-template.yaml -n ${ocp_project} \
                    -p APP_NAME=${appName} -p APP_FULL_VERSION=${appFullVersion} -p APP_MAJOR_VERSION=${appMajorVersion}  \
                    -p GIT_COMMIT_ID=${gitCommitId} -p PUBLIC_ROUTE_PREFIX=${public_route_prefix} -p JENKINS_BUILD_NUMBER=${BUILD_NUMBER} \
                    -p APP_ROUTE_PATH="/${micrositeName}" \
                    | oc replace --force=true -n ${ocp_project} -f -
                    oc annotate route ${appName}-v${appMajorVersion} --overwrite haproxy.router.openshift.io/timeout=5m
                    sleep 5

                    oc rollout status dc/${appName}-v${appMajorVersion}
                    """
            }
        }
    }

   stage('Nginx ConfigMap'){
      sh """
            set -x
            set -e
            oc project ${ocp_project}
            oc delete configmap ${appName}-nginx-rewrite || true

            oc create configmap ${appName}-nginx-rewrite --from-file=./nginx.conf || true
            oc set volume dc/${appName}-v${appMajorVersion} --type=configmap --name=nginx-rewrite  --configmap-name=${appName}-nginx-rewrite --mount-path=/opt/app-root/etc/nginx.d/ --add=true --confirm=false || true
         """
   }
}

def prepareEnv(channel_id) {
    Envsfile = readFile('./.env')
    Envsfile = Envsfile.replaceAll('\\$channel_id', channel_id)

    writeFile file: './.env', text: Envsfile
}

def prepareNginx(public_route_prefix) {
    Nginxfile = readFile('./nginx.conf')
    Nginxfile = Nginxfile.replaceAll('\\$public_route_prefix', public_route_prefix)

    writeFile file: './nginx.conf', text: Nginxfile
}
